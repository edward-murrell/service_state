<?php

/**
 * @file
 * Tests for servicestate module
 */

/**
 * 
 */
class ServiceStateTestCase extends DrupalWebTestCase {
  protected $user = null;

  /**
   * Setup our environment for this test.
   */
  public function setUp() {
    parent::setUp(array(
      'servicestate',
      'servicestate_tests'
    ));
    $perms = array_keys(servicestate_permission());
    $this->user = $this->drupalCreateUser($perms);
  }

  /**
   * Provide info to drupal about this test.
   *
   * Displays on the testing page.
   */
  public static function getInfo() {
    // Note: getInfo() string should not be translated.
    return array(
      'name'        => 'Servicestate functional tests',
      'description' => 'Test access and various responses states.',
      'group'       => 'Servicestate',
    );
  }

  /**
   * Test access profiles.
   */
  public function testAccess() {
    $this->drupalGet('servicestate');

    // Should 403 without proper auth here
    $this->assertResponse('403');

    $this->drupalGet('servicestate/json/cron');
    $this->assertResponse('403');

    // Login with user account with appropriate role and try again.
    $this->drupalLogin($this->user);
    $this->drupalGet('servicestate');
    $this->assertResponse('200');
  }

  public function testCron() {
    $this->drupalLogin($this->user);

    // Check OK
    $response = $this->drupalGetAJAX('servicestate/json/cron');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_OK
    );

    // Check never
    variable_del('cron_last');
    $response = $this->drupalGetAJAX('servicestate/json/cron');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_WARN
    );
    $this->assertEqual(
      $response['error'],
      'Cron has never been run.'
    );

    // Check warning
    variable_set('cron_last',(time() - 1800));
    $response = $this->drupalGetAJAX('servicestate/json/cron');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_WARN
    );

    // Check critical
    variable_set('cron_last',(time() - 7200));
    $response = $this->drupalGetAJAX('servicestate/json/cron');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_FAIL
    );
  }

  /*
   * Check that disabled checks are not available
   */
  public function testRemovedCheck() {
    $this->drupalLogin($this->user);
    $response = $this->drupalGetAJAX('servicestate/json/removed');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_NO_SUCH_SERVICE
    );
    $this->assertEqual(
      $response['error'],
      'This service does not exist'
    );
  }
  
  /*
   * Check that a internally broken check returns cleanly.
   */
  public function testBrokenCheck() {
    $this->drupalLogin($this->user);
    $response = $this->drupalGetAJAX('servicestate/json/broken');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_INTERNAL_ERROR
    );
    $this->assertEqual(
      $response['error'],
      'This service check is not defined properly'
    );
  }

  /*
   * Check that the built in memcache module is turned off automagically when module is not loaded.
   */
  public function testMemcacheRemoved() {
    $this->drupalLogin($this->user);
    $response = $this->drupalGetAJAX('servicestate/json/memcache');
    $this->assertEqual(
      $response['status'],
      SERVICESTATE_NO_SUCH_SERVICE
    );
    $this->assertEqual(
      $response['error'],
      'This service does not exist'
    );
  }

  /*
   * Test that servicestate_message_variable returns properly
   */
  public function testMessageVarCallback() {
    $this->drupalLogin($this->user);
    $rand = $this->randomString(17);
    variable_set('serv_test_var',$rand);

    $response = $this->drupalGetAJAX('servicestate/json/testvar');

    $this->assertEqual(
      $response['status'],
      SERVICESTATE_MESSAGE
    );
    $this->assertEqual(
      $response['message'],
      $rand
    );


    $response = $this->drupalGetAJAX('servicestate/json/testvar_broken');

    $this->assertEqual(
      $response['status'],
      SERVICESTATE_WARN
    );
    $this->assertEqual(
      $response['error'],
      'Variable XYZ not set.'
    );
  }

}
/*

tests: 
servicestate_message_variable
servicestate_message_function
ordering
test JSON response in message formats
test html 
*/