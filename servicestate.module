<?php
/**
 * @file
 * Module file for servicestate module, which queries and displays the
 * status of upstream services.
 */

define ('SERVICESTATE_ID_PREFIX','servicestate-item');

define ('SERVICESTATE_OK','OK');
define ('SERVICESTATE_WARN','WARNING');
define ('SERVICESTATE_FAIL','ERROR');
define ('SERVICESTATE_MESSAGE','MESSAGE'); // Display a message, rather than a OK status
define ('SERVICESTATE_NO_SUCH_SERVICE','nosuchservice');
define ('SERVICESTATE_CHECK_DISABLED','DISABLED');
define ('SERVICESTATE_INTERNAL_ERROR','INTERROR'); // File or callback could not be found.

/**
 * Implements hook_menu().
 */
function servicestate_menu() {
  $items = array();

  $items['servicestate'] = array(
    'title'  => 'Service state',
    'page callback'     => 'servicestate_view_page',
    'access callback'   => 'user_access',
    'access arguments'  => array('access servicestate page'),
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'servicestate.page.inc', // temporary
  );
  $items['servicestate/ajax/%'] = array(
    'title'  => 'Service state',
    'page callback'     => 'servicestate_drupal_ajax',
    'page arguments'    => array(2),
    'access callback'   => 'user_access',
    'access arguments'  => array('access servicestate page'),
    'type'              => MENU_CALLBACK,
    'file'              => 'servicestate.ajax.inc', // temporary
  );
  $items['servicestate/json/%'] = array(
    'title'  => 'Service state',
    'page callback'     => 'servicestate_json_ajax',
    'page arguments'    => array(2),
    'access callback'   => 'user_access',
    'access arguments'  => array('access servicestate api'),
    'type'              => MENU_CALLBACK,
    'file'              => 'servicestate.ajax.inc', // temporary
  );

  return $items;
}

/*
 * Implements hook_permission
 */
function servicestate_permission() {
 return array(
    'access servicestate page' => array(
      'title' => t('Access service state page'),
      'description' => t('Allow users to see the Service State summary page'),
    ),
    'access servicestate api' => array(
      'title' => t('Access to API checks'),
      'description' => t('Allow users to access Service State via non-html API calls'),
    ),
  );
}


/*
 * Implementation of hook_theme().
 */
function servicestate_theme($existing, $type, $theme, $path) {
  return array(
    'servicestate_view_table' => array(
      'template' => 'servicestate-view-table',
      'variables' => array(
        'elements' => array(),
      ),
      'file' => 'servicestate.theme.inc',
      #'pattern' =>
    ),
    'servicestate_view_item' => array(
      'template' => 'servicestate-view-item',
      'variables' => array(
        'title'   => NULL,
        'service' => NULL,
        'data'    => NULL,
        'state'   => NULL,   // Pre rendered state
        'method'  => 'html', // Render on demand, or use ajax?
        'button'  => NULL,
        'json_link'  => NULL,
      ),
      'file' => 'servicestate.theme.inc',
    )
  );
}

/*
 * @param $id the machine name of the service.
 * Format callback for querying service.
 */
function servicestate_query_callback($id) {
  $services = servicestate_get_services();
  if (!array_key_exists($id,$services)) {
    return array(
      'status' => SERVICESTATE_NO_SUCH_SERVICE,
      'error'  => 'This service does not exist',
    );
  } else {
    $srv  = $services[$id];
  }

  // TODO: Check if $srv[file] is an array, and load all files the string
  // TODO: Check that file(s) actually load
  if (array_key_exists('file',$srv) && !empty($srv['file'])) {
    include_once($srv['file']);
  }
  $result = call_user_func_array($srv['callback'],$srv['arguments']);

  // TODO: Some functions may only return a boolean, check for this
  // and format the result accordingly.

  return $result;
}

/*
 * Get a list of all services.
 */
function servicestate_get_services() {
  $services = array();
  // TODO: Add cache here.
  $services = module_invoke_all('servicestate_services');
  return $services;
}

/*
 * Implements hook_servicestate_services
 */
function servicestate_servicestate_services() {
  $services = array();

  $services['cron'] = array(
    'title'         => t('Cron'),
    'description'   => t('Checks when cron last ran.'),
    'callback'      => 'servicestate_cron_check',
    'arguments'     => array(),
    'file'          => 'servicestate.plugins.inc',
    'group'         => '',
    'weight'        => 0,
    'enabled'       => TRUE,
  );

  $services['memcache'] = array(
    'title'         => t('Memcache'),
    'description'   => t('Checks the memcache daemon is up.'),
    'callback'      => 'servicestate_memcache_check',
    'arguments'     => array(),
    'file'          => 'servicestate.plugins.inc',
    'group'         => '',
    'weight'        => 0,
    'enabled'       => TRUE,
  );

  return $services;
}

/*
 * Call a supplied function, wrap the result in a SERVICESTATE_MESSAGE,
 * returns SERVICESTATE_WARNING if an empty string is returned.
 * returns SERVICESTATE_FAIL if the function doesn't exist.
 * @TODO: Add further arguments to function called
 */
function servicestate_message_function($function) {
  $state = array();
  if (!function_exists($function)) {
    $state['status']  = SERVICESTATE_FAIL;
    $state['error']   = t('Callback does not exist.');
    return $state;
  }
  $result = call_user_func($function);
  if (empty($result)) {
    $state['status']  = SERVICESTATE_WARN;
    $state['error']   = t('Service state empty.');
    return $state;
  }
  else {
    $state['status']  = SERVICESTATE_MESSAGE;
    $state['message'] = $result;
  }
  return $state;
}

/*
 * Find the supplied variable
 * return a warning if the variable doesn't exist.
 */
function servicestate_message_variable($variable) {
  $state = array();
  $var = variable_get($variable);
  if ($var === null) {
    $state['status']  = SERVICESTATE_WARN;
    $state['error']   = t('Variable !var not set.',array('!var' => $variable));
  }
  else {
    $state['status']  = SERVICESTATE_MESSAGE;
    $state['message'] = $var;
  }
  return $state;
}
